Rho is an embeddable scripting language for Rust, largely inspired by Lua,
Javascript, and Rust, and also functional languages like Lisp and Haskell.

Its data model is unique by design; every variable has a unique value, and
can not a shared reference to a value, unlike most other scripting languages.
This includes re-assigned values in the local scope, and also function
arguments (passed "by-value").

In practice, at the low level, values aren't always copied when they are passed
around. To optimize runtime performance, data can have multiple references, but
data that has multiple references can not be modified. To make changes to the
value, you must make your own local copy of it so it doesn't affect the value
that others see. This kind of lazy copying is also known as "copy-on-write" (CoW).

This avoids situations where unexpected side effects might happen; for
example, when a value referenced in two places is modified in one location,
the value is copied first so that the change is not made to the value in the
other location.
(Considering adding opt-in side effects / shared modification in the future)

Types:
- nulltype `null`
- bool `true`, `false`
- int `20`, `0x10c`, `0b010`
- float `1.0`, `-1.e100`
- str `'foo'`
- list `[1, true, 'foo']`
- table `[x: 2]`
- type (values: all of the above)
- function `fn() {}`

Builtin Functions:
repr()
eval()
print()
input()
cmp()

Assignment:
= += -= *= /= %= &= != ^=

Binary Operators:
+ - * / % & | ^ && || == != > < >= <=

Unary Operators:
! - 

Special:
[] ()

Keywords:
if else while for fn return continue break match in loop true false

Expressions:
    (<expr>)
    a <biop> b
    <unop>a
    a[b]
    a(b, ...)
    [a, ...]
    [a: b, ...]
    {<stmt> ... <expr>}

Patterns:
